// ===================== Ultron AI Assistant (MainActivity.kt) =====================
// âœ… White-hat, permission-based Android AI Assistant powered by Claude
// Features: Voice Input, Claude Chat, Text-to-Speech, Device Control (WiFi, Bluetooth, NFC, SMS)

package com.example.ultronai

import android.Manifest
import android.app.Activity
import android.bluetooth.BluetoothAdapter
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.net.wifi.WifiManager
import android.nfc.NfcAdapter
import android.os.Build
import android.os.Bundle
import android.speech.RecognizerIntent
import android.speech.tts.TextToSpeech
import android.telephony.SmsManager
import android.util.Log
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import okhttp3.*
import org.json.JSONArray
import org.json.JSONObject
import java.io.IOException
import java.util.*

class MainActivity : AppCompatActivity(), TextToSpeech.OnInitListener {

    private val REQUEST_CODE_SPEECH_INPUT = 100
    private lateinit var textToSpeech: TextToSpeech
    private lateinit var txtResponse: TextView
    private val client = OkHttpClient()

    private val API_KEY = "YOUR_CLAUDE_API_KEY"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        textToSpeech = TextToSpeech(this, this)
        val btnSpeak: Button = findViewById(R.id.btnSpeak)
        txtResponse = findViewById(R.id.txtResponse)

        checkPermissions()

        btnSpeak.setOnClickListener {
            startVoiceInput()
        }
    }

    private fun checkPermissions() {
        val permissions = arrayOf(
            Manifest.permission.RECORD_AUDIO,
            Manifest.permission.INTERNET,
            Manifest.permission.BLUETOOTH,
            Manifest.permission.CHANGE_WIFI_STATE,
            Manifest.permission.NFC,
            Manifest.permission.SEND_SMS
        )

        val missing = permissions.filter {
            ContextCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED
        }

        if (missing.isNotEmpty()) {
            ActivityCompat.requestPermissions(this, missing.toTypedArray(), 101)
        }
    }

    private fun startVoiceInput() {
        val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH)
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
        intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())
        startActivityForResult(intent, REQUEST_CODE_SPEECH_INPUT)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        if (requestCode == REQUEST_CODE_SPEECH_INPUT && resultCode == Activity.RESULT_OK && data != null) {
            val result = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)
            val userInput = result?.get(0).toString()
            sendToClaude(userInput)
        }
    }

    private fun sendToClaude(input: String) {
        val url = "https://api.anthropic.com/v1/messages"
        val json = JSONObject()
        json.put("model", "claude-3-opus-20240229")
        json.put("max_tokens", 300)
        json.put("messages", JSONArray().put(JSONObject().put("role", "user").put("content", input)))

        val body = RequestBody.create(MediaType.parse("application/json"), json.toString())

        val request = Request.Builder()
            .url(url)
            .post(body)
            .addHeader("x-api-key", API_KEY)
            .addHeader("Content-Type", "application/json")
            .build()

        client.newCall(request).enqueue(object : Callback {
            override fun onFailure(call: Call, e: IOException) {
                runOnUiThread {
                    txtResponse.text = "Error: ${e.message}"
                }
            }

            override fun onResponse(call: Call, response: Response) {
                val responseBody = response.body()?.string()
                try {
                    val parsed = JSONObject(responseBody)
                    val reply = parsed.getJSONArray("content").getJSONObject(0).getString("text")
                    runOnUiThread {
                        txtResponse.text = reply
                        speakText(reply)
                        handleUltronCommands(reply)
                    }
                } catch (e: Exception) {
                    runOnUiThread {
                        txtResponse.text = "Failed to parse response"
                    }
                }
            }
        })
    }

    private fun speakText(text: String) {
        textToSpeech.speak(text, TextToSpeech.QUEUE_FLUSH, null, "")
    }

    override fun onInit(status: Int) {
        if (status == TextToSpeech.SUCCESS) {
            textToSpeech.language = Locale.UK
        }
    }

    private fun handleUltronCommands(response: String) {
        when {
            response.contains("turn on wifi", true) -> {
                val wifiManager = applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager
                wifiManager.isWifiEnabled = true
            }
            response.contains("turn off wifi", true) -> {
                val wifiManager = applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager
                wifiManager.isWifiEnabled = false
            }
            response.contains("turn on bluetooth", true) -> {
                val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()
                bluetoothAdapter?.enable()
            }
            response.contains("turn off bluetooth", true) -> {
                val bluetoothAdapter = BluetoothAdapter.getDefaultAdapter()
                bluetoothAdapter?.disable()
            }
            response.contains("send sms", true) -> {
                try {
                    val sms = SmsManager.getDefault()
                    sms.sendTextMessage("PHONE_NUMBER", null, "This is Ultron.", null, null)
                } catch (e: Exception) {
                    Toast.makeText(this, "SMS failed", Toast.LENGTH_SHORT).show()
                }
            }
            response.contains("check nfc", true) -> {
                val nfcAdapter = NfcAdapter.getDefaultAdapter(this)
                val status = if (nfcAdapter?.isEnabled == true) "NFC is enabled" else "NFC is disabled"
                speakText(status)
            }
        }
    }

    override fun onDestroy() {
        textToSpeech.shutdown()
        super.onDestroy()
    }
}
